import 'package:analyzer/dart/ast/ast.dart';
import 'package:flutter/material.dart';

import '../utils/utils.dart';
import 'app_decorated_box.dart';

class AstNodeDetailsView extends StatelessWidget {
  const AstNodeDetailsView({
    super.key,
    required this.astNode,
  });

  final AstNode astNode;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;

    final content = switch (astNode) {
      final AdjacentStrings _ => const Text('Coming soon...'),
      final Annotation _ => const Text('Coming soon...'),
      final ArgumentList _ => const Text('Coming soon...'),
      final AsExpression _ => const Text('Coming soon...'),
      final AssertInitializer _ => const Text('Coming soon...'),
      final AssertStatement _ => const Text('Coming soon...'),
      final AssignedVariablePattern _ => const Text('Coming soon...'),
      final AssignmentExpression _ => const Text('Coming soon...'),
      final AwaitExpression _ => const Text('Coming soon...'),
      final BinaryExpression _ => const Text('Coming soon...'),
      final Block _ => const Text('Coming soon...'),
      final BlockFunctionBody _ => const Text('Coming soon...'),
      final BooleanLiteral _ => const Text('Coming soon...'),
      final BreakStatement _ => const Text('Coming soon...'),
      final CascadeExpression _ => const Text('Coming soon...'),
      final CaseClause _ => const Text('Coming soon...'),
      final CastPattern _ => const Text('Coming soon...'),
      final CatchClause _ => const Text('Coming soon...'),
      final CatchClauseParameter _ => const Text('Coming soon...'),
      final ClassDeclaration _ => const Text('Coming soon...'),
      final ClassTypeAlias _ => const Text('Coming soon...'),
      final Comment _ => const Text('Coming soon...'),
      final CommentReference _ => const Text('Coming soon...'),
      final CompilationUnit _ => const Text('Coming soon...'),
      final ConditionalExpression _ => const Text('Coming soon...'),
      final Configuration _ => const Text('Coming soon...'),
      final ConstantPattern _ => const Text('Coming soon...'),
      final ConstructorDeclaration _ => const Text('Coming soon...'),
      final ConstructorFieldInitializer _ => const Text('Coming soon...'),
      final ConstructorName _ => const Text('Coming soon...'),
      final ConstructorReference _ => const Text('Coming soon...'),
      final ConstructorSelector _ => const Text('Coming soon...'),
      final ContinueStatement _ => const Text('Coming soon...'),
      final DeclaredIdentifier _ => const Text('Coming soon...'),
      final DeclaredVariablePattern _ => const Text('Coming soon...'),
      final DefaultFormalParameter _ => const Text('Coming soon...'),
      final DoStatement _ => const Text('Coming soon...'),
      final DottedName _ => const Text('Coming soon...'),
      final DoubleLiteral _ => const Text('Coming soon...'),
      final EmptyFunctionBody _ => const Text('Coming soon...'),
      final EmptyStatement _ => const Text('Coming soon...'),
      final EnumConstantArguments _ => const Text('Coming soon...'),
      final EnumConstantDeclaration _ => const Text('Coming soon...'),
      final EnumDeclaration _ => const Text('Coming soon...'),
      final ExportDirective _ => const Text('Coming soon...'),
      final ExpressionFunctionBody _ => const Text('Coming soon...'),
      final ExpressionStatement _ => const Text('Coming soon...'),
      final ExtendsClause _ => const Text('Coming soon...'),
      final ExtensionDeclaration _ => const Text('Coming soon...'),
      final ExtensionOverride _ => const Text('Coming soon...'),
      final ExtensionTypeDeclaration _ => const Text('Coming soon...'),
      final FieldDeclaration _ => const Text('Coming soon...'),
      final FieldFormalParameter _ => const Text('Coming soon...'),
      final ForEachPartsWithDeclaration _ => const Text('Coming soon...'),
      final ForEachPartsWithIdentifier _ => const Text('Coming soon...'),
      final ForEachPartsWithPattern _ => const Text('Coming soon...'),
      final ForElement _ => const Text('Coming soon...'),
      final FormalParameterList _ => const Text('Coming soon...'),
      final ForPartsWithDeclarations _ => const Text('Coming soon...'),
      final ForPartsWithExpression _ => const Text('Coming soon...'),
      final ForPartsWithPattern _ => const Text('Coming soon...'),
      final ForStatement _ => const Text('Coming soon...'),
      final FunctionDeclaration _ => const Text('Coming soon...'),
      final FunctionDeclarationStatement _ => const Text('Coming soon...'),
      final FunctionExpression _ => const Text('Coming soon...'),
      final FunctionExpressionInvocation _ => const Text('Coming soon...'),
      final FunctionReference _ => const Text('Coming soon...'),
      final FunctionTypeAlias _ => const Text('Coming soon...'),
      final FunctionTypedFormalParameter _ => const Text('Coming soon...'),
      final GenericFunctionType _ => const Text('Coming soon...'),
      final GenericTypeAlias _ => const Text('Coming soon...'),
      final GuardedPattern _ => const Text('Coming soon...'),
      final HideCombinator _ => const Text('Coming soon...'),
      final IfElement _ => const Text('Coming soon...'),
      final IfStatement _ => const Text('Coming soon...'),
      final ImplementsClause _ => const Text('Coming soon...'),
      final ImplicitCallReference _ => const Text('Coming soon...'),
      final ImportDirective _ => const Text('Coming soon...'),
      final ImportPrefixReference _ => const Text('Coming soon...'),
      final IndexExpression _ => const Text('Coming soon...'),
      final InstanceCreationExpression _ => const Text('Coming soon...'),
      final IntegerLiteral _ => const Text('Coming soon...'),
      final InterpolationExpression _ => const Text('Coming soon...'),
      final InterpolationString _ => const Text('Coming soon...'),
      final IsExpression _ => const Text('Coming soon...'),
      final Label _ => const Text('Coming soon...'),
      final LabeledStatement _ => const Text('Coming soon...'),
      final LibraryDirective _ => const Text('Coming soon...'),
      final LibraryIdentifier _ => const Text('Coming soon...'),
      final ListLiteral _ => const Text('Coming soon...'),
      final ListPattern _ => const Text('Coming soon...'),
      final LogicalAndPattern _ => const Text('Coming soon...'),
      final LogicalOrPattern _ => const Text('Coming soon...'),
      final MapLiteralEntry _ => const Text('Coming soon...'),
      final MapPattern _ => const Text('Coming soon...'),
      final MapPatternEntry _ => const Text('Coming soon...'),
      final MethodDeclaration _ => const Text('Coming soon...'),
      final MethodInvocation _ => const Text('Coming soon...'),
      final MixinDeclaration _ => const Text('Coming soon...'),
      final NamedExpression _ => const Text('Coming soon...'),
      final NamedType _ => const Text('Coming soon...'),
      final NativeClause _ => const Text('Coming soon...'),
      final NativeFunctionBody _ => const Text('Coming soon...'),
      final NullAssertPattern _ => const Text('Coming soon...'),
      final NullCheckPattern _ => const Text('Coming soon...'),
      final NullLiteral _ => const Text('Coming soon...'),
      final ObjectPattern _ => const Text('Coming soon...'),
      final ParenthesizedExpression _ => const Text('Coming soon...'),
      final ParenthesizedPattern _ => const Text('Coming soon...'),
      final PartDirective _ => const Text('Coming soon...'),
      final PartOfDirective _ => const Text('Coming soon...'),
      final PatternAssignment _ => const Text('Coming soon...'),
      final PatternField _ => const Text('Coming soon...'),
      final PatternFieldName _ => const Text('Coming soon...'),
      final PatternVariableDeclaration _ => const Text('Coming soon...'),
      final PatternVariableDeclarationStatement _ => const Text('Coming soon...'),
      final PostfixExpression _ => const Text('Coming soon...'),
      final PrefixedIdentifier _ => const Text('Coming soon...'),
      final PrefixExpression _ => const Text('Coming soon...'),
      final PropertyAccess _ => const Text('Coming soon...'),
      final RecordLiteral _ => const Text('Coming soon...'),
      final RecordPattern _ => const Text('Coming soon...'),
      final RecordTypeAnnotation _ => const Text('Coming soon...'),
      final RecordTypeAnnotationNamedField _ => const Text('Coming soon...'),
      final RecordTypeAnnotationNamedFields _ => const Text('Coming soon...'),
      final RecordTypeAnnotationPositionalField _ => const Text('Coming soon...'),
      final RedirectingConstructorInvocation _ => const Text('Coming soon...'),
      final RelationalPattern _ => const Text('Coming soon...'),
      final RepresentationConstructorName _ => const Text('Coming soon...'),
      final RepresentationDeclaration _ => const Text('Coming soon...'),
      final RestPatternElement _ => const Text('Coming soon...'),
      final RethrowExpression _ => const Text('Coming soon...'),
      final ReturnStatement _ => const Text('Coming soon...'),
      final ScriptTag _ => const Text('Coming soon...'),
      final SetOrMapLiteral _ => const Text('Coming soon...'),
      final ShowCombinator _ => const Text('Coming soon...'),
      final SimpleFormalParameter _ => const Text('Coming soon...'),
      final SimpleIdentifier _ => const Text('Coming soon...'),
      final SimpleStringLiteral _ => const Text('Coming soon...'),
      final SpreadElement _ => const Text('Coming soon...'),
      final StringInterpolation _ => const Text('Coming soon...'),
      final SuperConstructorInvocation _ => const Text('Coming soon...'),
      final SuperExpression _ => const Text('Coming soon...'),
      final SuperFormalParameter _ => const Text('Coming soon...'),
      final SwitchCase _ => const Text('Coming soon...'),
      final SwitchDefault _ => const Text('Coming soon...'),
      final SwitchExpression _ => const Text('Coming soon...'),
      final SwitchExpressionCase _ => const Text('Coming soon...'),
      final SwitchPatternCase _ => const Text('Coming soon...'),
      final SwitchStatement _ => const Text('Coming soon...'),
      final SymbolLiteral _ => const Text('Coming soon...'),
      final ThisExpression _ => const Text('Coming soon...'),
      final ThrowExpression _ => const Text('Coming soon...'),
      final TopLevelVariableDeclaration _ => const Text('Coming soon...'),
      final TryStatement _ => const Text('Coming soon...'),
      final TypeArgumentList _ => const Text('Coming soon...'),
      final TypeLiteral _ => const Text('Coming soon...'),
      final TypeParameter _ => const Text('Coming soon...'),
      final TypeParameterList _ => const Text('Coming soon...'),
      final VariableDeclaration _ => const Text('Coming soon...'),
      final VariableDeclarationList _ => const Text('Coming soon...'),
      final VariableDeclarationStatement _ => const Text('Coming soon...'),
      final WhenClause _ => const Text('Coming soon...'),
      final WhileStatement _ => const Text('Coming soon...'),
      final WildcardPattern _ => const Text('Coming soon...'),
      final WithClause _ => const Text('Coming soon...'),
      final YieldStatement _ => const Text('Coming soon...'),
      _ => Text(astNode.toSource()),
    };

    return AppDecoratedBox(
      child: LayoutBuilder(
        builder: (context, constrains) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(8.0),
            child: ConstrainedBox(
              constraints: BoxConstraints(minHeight: constrains.maxHeight),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  ListTile(
                    title: Text(
                      getAstNodeTypeName(astNode),
                      style: textTheme.titleLarge,
                    ),
                  ),
                  content,
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
